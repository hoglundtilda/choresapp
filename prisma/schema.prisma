generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // Postgres RED
  url               = env("DATABASE_URL")
  // Postgres SILVER
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String?
  owner      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[]
}

model Activity {
  id        String    @id @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  startDate DateTime  @default(now())
  endDate   DateTime?

  categoryId  String?
  userId      String?
  owner       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  timeRecords TimeRecord[]
}

model TimeRecord {
  id        String   @id @unique @default(uuid())
  amount    Float
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  userId     String?
  activityId String?
  owner      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Streak {
  id        String    @id @unique @default(uuid())
  startDate DateTime  @default(now())
  endDate   DateTime?
  name      String
  count     Int       @default(0)

  userId String?
  owner  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String
  password  String   @db.VarChar(82)

  categories  Category[]
  activities  Activity[]
  timeRecords TimeRecord[]
  streaks     Streak[]
}
